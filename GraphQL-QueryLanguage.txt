				GraphQL
.....................................................................................

What is GraphQL?
	GraphQL is a "new API" standard that provides a more efficient, powerful and flexible alternative to RESTFull API.

API:
 Appliation programming interface : Entry and exit point for data access.

How apis are represented /encapsulated?
 inside objects

Types of apis:
 1.local api
	api which is part of single runtime- jvm
 2.remote api
       rpc
	 -webservices -  rest api,soap api
         -rpi - grpc
         -tcp based apps
         -smtp based app
       etc...

REST:(Representational State Transfer)

REST is api standard based on HTTP protocal.
REST follows REST Spec https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm


Drawbacks of REST:

   REST has not been designed to be user centric rather than data centric...

if you define any api, which returns data set eg: if you query an api called products

products may have so many fields, i dont want all fields which exposed by the api...

GET  /api/products

 =>[{
  ...
 }]

Since REST not able to solve all types of user biz requirements, facebook was looking another solution to get data based "user centeric" not based on "data centeric"
		         The birth of GraphQL

At its core, GraphQL enables declarative data fetching where a client can specify exactly what data it needs from an API.

Instead of multiple endpoints that return fixed data structures, a GraphQL server only exposes a single endpoint and responds with precisely the data a client asked for.

REST endpoints:

GET /api/products
POST /api/products
PUT /api/products/id
DELETE /api/products/id

GraphQL - A Query Language for APIs

Most applications today have the need to fetch data from a server where that data is stored in a database. It’s the responsibility of the API to provide an interface to the stored data that fits an application’s needs.

GraphQL is often confused with being a database technology. This is a misconception, 
GraphQL is a query language for APIs - not databases. In that sense it’s database agnostic and effectively can be used in any context where an API is used.
GraphQL - A Query Language for APIs

Most applications today have the need to fetch data from a server where that data is stored in a database. It’s the responsibility of the API to provide an interface to the stored data that fits an application’s needs.



A more efficient Alternative to REST
....................................

REST has been a popular way to expose data from a server. When the concept of REST was developed, client applications were relatively simple and the development pace wasn’t nearly where it is today. REST thus was a good fit for many applications. However, the API landscape has radically changed over the last couple of years. In particular, there are three factors that have been challenging the way APIs are designed:

1. Increased mobile usage creates need for efficient data loading
Increased mobile usage, low-powered devices and sloppy networks were the initial reasons why Facebook developed GraphQL. GraphQL minimizes the amount of data that needs to be transferred over the network and thus majorly improves applications operating under these conditions.

2. Variety of different frontend frameworks and platforms
The heterogeneous landscape of frontend frameworks and platforms that run client applications makes it difficult to build and maintain one API that would fit the requirements of all. With GraphQL, each client can access precisely the data it needs.

3. Fast development & expectation for rapid feature development
Continuous deployment has become a standard for many companies, rapid iterations and frequent product updates are indispensable. With REST APIs, the way data is exposed by the server often needs to be modified to account for specific requirements and design changes on the client-side. This hinders fast development practices and product iterations.
.....................................................................................
.....................................................................................
			  How to begin with GraphQL


GraphQL is platform and language independant.

GraphQL Can be classified into two category

1.Client side - How to send data(Request) to the GraphQL server.
  in order to send data from the client face book published one spec

called
   "GraphQL Query language spec"

2.Server side - How to build graph(object tree) from the data sources
    "GraphQL Schema language spec"

.....................................................................................
			   Client Side-GraphQL Query language spec
....................................................................................

.....................................................................................
			  GraphQL request and response model.

Declarative Programming:

What you write, you have to get the same structure.

The Query request is more readable,declarative. WHich micics the javascript object literal syntax.

js object:

 let user =  {
     id:1,
     name:'joe'
     friends: [
        'bar','foo'
     ]
  } 

GraphQL Request payload : GraphQL Query
.......................................

GraphQL Client 

POST /endpoint

  {
     id
     name
     friends { -----------------------------> GraphQLAPIServer
        name
     }
  } 

Response:JSON
 {
     "id":1,
     "name":"joe"
     "friends": [      <----------------------------- GraphQLAPIServer
        "bar","foo"
     ]
  } 

..............................................................................................
				 REST AND CURD

Operations Type

GET ------Read
POST -----CREATE
PUT ------UPDATE
DELETE----Remove
.............................................................................................				GRAPHQL And CURD


GraphQL uses only URL which exposes Service


  {
     id
     name
     friends { -----------HTTP POST------------------> GraphQLServer
        name
     }
  } 

Since we have only one end point, how to Identify the different operations like create,read,update,delete.

Thats where graphql offers "client language called GraphQL Query language"........

GraphQL language offers syntax.


Operation Types:

1.Query
  read
2.mutation
  create,update,delete
3.subscription
   Streaming

query - a read only fetch
mutation- a write followed by read
subscription- a long live request that fetches data in response to source events
.....................................................................................
		          GraphQL Query Language
.....................................................................................		 	
1.selection set

 selectionSet : { Selection }

selectionSet could be "query,mutation,subscription"

Selection:
 -fields
 -Fragement Spread
 -lnline fragement.

fields:
query { 
   person {
    firstname =====>POST --------------------->Graphql server---execute
    lastname
   }
}
Selection set to be selected by somebody(Operation)

An Operation selects the set of information it needs, exactly will receive that information

Operation and Selection Set

//read =>GET
query {
 firstname
  lastname
  age
}
//Write
mutation createUser(params){
  user
}
//streaming
subscription getPriceQuote(params) {
 price
 name
}
.................................................................................
		How to learn GraphQL query language sepc
.................................................................................

We are going to use "MOCK GraphQL API/service".

Tool to test graphql end points:
1.client tool - playground
https://www.graphqlbin.com/v2/new

2.demo api
https://countries.trevorblades.com/

Concepts:
 => fields
 => arguments
 => aliases
 => fragements
 => variables
 => directives
 => Mutations
 => inline fragments

Fields: 
........
At its simplest, GraphQL is about asking for specific fields on objects. 
Let's start by looking at a very simple query and the result we get when we run it:

Are properties of an object.

eg:

query {
  countries {
    name
    capital
    languages {
      name
    }
  }
}
Response:
{
  "data": {
    "countries": [
      {
        "name": "Andorra",
        "capital": "Andorra la Vella",
        "languages": [
          {
            "name": "Catalan"
          }
        ]
      },
      {
        "name": "United Arab Emirates",
        "capital": "Abu Dhabi",
        "languages": [
          {
            "name": "Arabic"
          }
        ]
      }
]













